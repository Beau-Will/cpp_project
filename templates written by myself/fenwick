template<typename T>
struct Fenwick{
  int _n;
  std::vector<T> tr;

  void init(int n,T x = {}){
    _n = n;
    tr.assign(_n+1,x);
  }

  Fenwick(int n = 200000,T x = {}){
    init(n,x);
  }

  int lowbit(int x){
    return x&(-x);
  }

  template<typename U>
  void modify(int pos,U x){
    for(int i = pos; i <= _n; i += lowbit(i)){
      tr[i] += x;
    }
  }

  T query(int pos){
    T res {};
    for(int i = pos; i >= 1; i-=lowbit(i)){
      res += tr[i];
    }
    return res;
  }

  T range_query(int l,int r){
    return query(r)-query(l-1);
  }

  template<typename U>
  int find_first(U x){
    int l = 1,r = _n;

    auto check1 = [&](int pos){
      return query(pos) >= x;
    };

    while(l<r){
      int mid = (l+r)>>1;
      if(check1(mid)){
        r = mid;
      }else{
        l = mid+1;
      }
    }
    return l;
  }

  template<typename U>
  int find_last(U x){
    int l = 1,r = _n;

    auto check2 = [&](int pos){
      return query(pos) <= x;
    };

    while(l<r){
      int mid = (l+r+1)>>1;
      if(check2(mid)){
        l = mid;
      }else{
        r = mid-1;
      }
    }
    return l;
  }

  void resize(int n){
    init(n);
  }

  void assign(int n,T x = {}){
    init(n,x);
  }

  void clear(){
    _n = 0;
    tr.clear();
  }
};

using BIT = Fenwick<int>;
// using BIT = Fenwick<i64>;